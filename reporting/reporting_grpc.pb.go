// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: reporting.proto

package reporting

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReportingClient is the client API for Reporting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReportingClient interface {
	Run(ctx context.Context, in *Report, opts ...grpc.CallOption) (*ReportResult, error)
}

type reportingClient struct {
	cc grpc.ClientConnInterface
}

func NewReportingClient(cc grpc.ClientConnInterface) ReportingClient {
	return &reportingClient{cc}
}

func (c *reportingClient) Run(ctx context.Context, in *Report, opts ...grpc.CallOption) (*ReportResult, error) {
	out := new(ReportResult)
	err := c.cc.Invoke(ctx, "/reporting.Reporting/Run", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReportingServer is the server API for Reporting service.
// All implementations must embed UnimplementedReportingServer
// for forward compatibility
type ReportingServer interface {
	Run(context.Context, *Report) (*ReportResult, error)
	mustEmbedUnimplementedReportingServer()
}

// UnimplementedReportingServer must be embedded to have forward compatible implementations.
type UnimplementedReportingServer struct {
}

func (UnimplementedReportingServer) Run(context.Context, *Report) (*ReportResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedReportingServer) mustEmbedUnimplementedReportingServer() {}

// UnsafeReportingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReportingServer will
// result in compilation errors.
type UnsafeReportingServer interface {
	mustEmbedUnimplementedReportingServer()
}

func RegisterReportingServer(s grpc.ServiceRegistrar, srv ReportingServer) {
	s.RegisterService(&Reporting_ServiceDesc, srv)
}

func _Reporting_Run_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Report)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportingServer).Run(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/reporting.Reporting/Run",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportingServer).Run(ctx, req.(*Report))
	}
	return interceptor(ctx, in, info, handler)
}

// Reporting_ServiceDesc is the grpc.ServiceDesc for Reporting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reporting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reporting.Reporting",
	HandlerType: (*ReportingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Run",
			Handler:    _Reporting_Run_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reporting.proto",
}
